import 'package:deep_link_social_share/models/my_user.dart';
import 'package:deep_link_social_share/services/dynamic_links_service.dart';
import 'package:deep_link_social_share/services/firebase_auth_service.dart';
import 'package:deep_link_social_share/services/firestore_service.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

/// Used to create user-dependant objects that need to be accessible by all widgets.
/// This widget should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.

class AuthWidgetBuilder extends StatelessWidget {
  const AuthWidgetBuilder({
    Key? key,
    required this.builder,
  }) : super(key: key);
  final Widget Function(BuildContext, AsyncSnapshot<MyUser?>) builder;
  @override
  Widget build(BuildContext context) {
    final _authService = Provider.of<FirebaseAuthService>(
      context,
      listen: false,
    );
    print('AuthWidgetBuilder build ...');
    return StreamBuilder<MyUser?>(
      stream: _authService.onAuthStateChanged,
      builder: (context, snapshot) {
        final _user = snapshot.data;
        return _user == null

            /// When the snapshot has data it will run the builder with snapshot that contains
            /// a user and that builder will create the auth widget
            /// in the [AuthWidget] it will know what to display
            ? builder(context, snapshot)
            : MultiProvider(
                providers: [
                  Provider<MyUser>.value(value: _user),
                  Provider<FirestoreService>(
                    create: (_) => FirestoreService(uid: _user.uid),
                  ),
                  Provider<DynamicLinkService>(
                    create: (_) => DynamicLinkService(),
                  ),
                ],
                child: builder(context, snapshot),
              );
      },
    );
  }
}
